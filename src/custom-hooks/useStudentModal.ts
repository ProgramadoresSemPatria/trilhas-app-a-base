import { useState, useEffect } from "react"
import { StudentType } from "../utils/types"
import saveStudent from "../services/saveStudent"
import updateStudent from "../services/updateStudent"
import removeStudent from "../services/removeStudent"
import SuccessToast from "../components/toasts/success-toast"
import ErrorToast from "../components/toasts/error-toast"

interface UseStudentFormProps {
  selectedStudent: StudentType
  setSelectedStudent: (student: StudentType) => void
  setIsStudentSaved: (state: boolean) => void
  onClose: () => void
}

export default function useStudentMoal({
  selectedStudent,
  setSelectedStudent,
  setIsStudentSaved,
  onClose
}: UseStudentFormProps) {
  const [name, setName] = useState("")
  const [email, setEmail] = useState("")
  const [learningPath, setLearningPath] = useState("")
  const [errors, setErrors] = useState({ name: false, email: false, learningPath: false })

  useEffect(() => {
    if (selectedStudent && selectedStudent.userId) {
      setName(selectedStudent.name)
      setEmail(selectedStudent.email)
      setLearningPath(selectedStudent.learningPath)
    }
  }, [selectedStudent])

  const validateForm = () => {
    const newErrors = {
      name: !name.trim(),
      email: !email.includes("@") || !email.includes(".com"),
      learningPath: !learningPath,
    }
    setErrors(newErrors)
    return !Object.values(newErrors).some(Boolean)
  }

  const resetForm = () => {
    setName("")
    setEmail("")
    setLearningPath("")
    setErrors({ name: false, email: false, learningPath: false })
  }

  const handleClose = () => {
    resetForm()
    setSelectedStudent({ name: "", email: "", learningPath: "", userId: "", sessionToken: "", role: "student" })
    onClose()
  }

  const handleSubmit = async(e: React.FormEvent) => {
    e.preventDefault()

    if (validateForm()) {
      try {
        // Student ID on creation are generated by Firebase on saveStudent
        const userId = selectedStudent && selectedStudent.userId ? selectedStudent.userId : ""
        let response: number | undefined = 0

        if (selectedStudent?.userId) {
          response = await updateStudent({
            name, email, learningPath, userId: selectedStudent.userId,
            role: "student"
          });
        } 
        else {
          response = await saveStudent({ name, email, learningPath, userId, role: "student" });
        }
        
        if (response === 201) {
          SuccessToast({ message: "Aluno salvo com sucesso!" });
          setIsStudentSaved(true); 
          resetForm()
          onClose()
        } else {
          if (response === 409) {
            ErrorToast({ message: "JÃ¡ existe um aluno com esse email." });
            return
          }
          ErrorToast({ message: "Erro ao salvar aluno!" });
          setIsStudentSaved(false);
        }
      }
      catch (e) {
        ErrorToast({ message: "Erro ao salvar aluno!" });
        setIsStudentSaved(false);
        console.log(e)
      }
    }
  }

  const handleRemoveStudent = async () => {
    try {
      const response = await removeStudent(selectedStudent.userId);
      if (response === 200) {
        setIsStudentSaved(true); 
        resetForm()
        setSelectedStudent({ name: "", email: "", learningPath: "", userId: "", sessionToken: "", role: "student" })
        onClose()
        SuccessToast({ message: "Aluno removido com sucesso!" });
      } else {
        setIsStudentSaved(false);
        ErrorToast({ message: "Erro ao remover aluno!" });
      }
    }
    catch (e) {
      ErrorToast({ message: "Erro ao remover aluno!" });
      setIsStudentSaved(false);
      console.log(e)
    }
  }

  return {
    name,
    setName,
    email,
    setEmail,
    learningPath,
    setLearningPath,
    errors,
    handleSubmit,
    handleRemoveStudent,
    handleClose,
    isEditing: selectedStudent && selectedStudent.userId
  }
}